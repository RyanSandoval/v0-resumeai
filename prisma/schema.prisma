// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  resumes      Resume[]
  subscription Subscription?
  featureUsage FeatureUsage[]
  baselineResume BaselineResume?
  jobApplications JobApplication[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id             String   @id @default(cuid())
  userId         String
  title          String   @default("Untitled Resume")
  originalText   String   @db.Text
  optimizedText  String   @db.Text
  jobDescription String?  @db.Text
  jobUrl         String?
  keywords       String[]
  score          Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BaselineResume {
  id           String   @id @default(cuid())
  userId       String   @unique
  resumeText   String   @db.Text
  fileType     String   @default("txt")
  fileName     String   @default("baseline-resume")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobApplication {
  id             String   @id @default(cuid())
  userId         String
  title          String
  company        String?
  jobDescription String?  @db.Text
  jobUrl         String?
  status         String   @default("want_to_apply") // want_to_apply, applied, interview, archived
  resumeId       String?
  notes          String?  @db.Text
  appliedDate    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                 String    @id @default(cuid())
  userId             String    @unique
  stripeCustomerId   String?   @unique
  stripeSubscriptionId String?
  stripePriceId      String?
  stripeCurrentPeriodEnd DateTime?
  plan               String    @default("free") // free, basic, premium
  status             String    @default("active") // active, canceled, past_due
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FeatureUsage {
  id        String   @id @default(cuid())
  userId    String
  feature   String   // resume_optimizations, templates, etc.
  used      Int      @default(0)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, feature])
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  event     String
  userId    String?
  metadata  Json?
  createdAt DateTime @default(now())
}

model SubscriptionEvent {
  id                String   @id @default(cuid())
  userId            String?
  stripeCustomerId  String?
  eventType         String
  plan              String?
  amount            Float?
  currency          String?
  status            String?
  createdAt         DateTime @default(now())
}
