// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  name              String?
  email             String?           @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  resumes           Resume[]
  baselineResumes   BaselineResume[]
  jobApplications   JobApplication[]
  subscriptions     Subscription[]
  featureUsage      FeatureUsage[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  role              String            @default("user") // "user", "admin"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id              String   @id @default(cuid())
  userId          String
  title           String
  content         String   @db.Text
  optimizedContent String?  @db.Text
  jobDescription  String?  @db.Text
  score           Int?
  keywords        String?  @db.Text // JSON string of keywords
  suggestions     String?  @db.Text // JSON string of suggestions
  templateId      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobApplications JobApplication[]
}

model BaselineResume {
  id              String   @id @default(cuid())
  userId          String
  title           String
  content         String   @db.Text
  isDefault       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobApplication {
  id              String    @id @default(cuid())
  userId          String
  title           String
  company         String?
  jobDescription  String?   @db.Text
  jobUrl          String?
  location        String?
  status          String    @default("want_to_apply") // want_to_apply, applied, interviewing, offer, rejected
  resumeId        String?
  notes           String?   @db.Text
  appliedDate     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  resume          Resume?   @relation(fields: [resumeId], references: [id], onDelete: SetNull)
}

model Subscription {
  id              String    @id @default(cuid())
  userId          String
  stripeCustomerId String?   @unique
  stripeSubscriptionId String? @unique
  stripePriceId   String?
  stripeCurrentPeriodEnd DateTime?
  plan            String    @default("free") // free, basic, pro
  status          String    @default("active") // active, canceled, past_due
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FeatureUsage {
  id              String    @id @default(cuid())
  userId          String
  feature         String    // resume_optimization, job_application, etc.
  count           Int       @default(0)
  lastUsed        DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, feature])
}
