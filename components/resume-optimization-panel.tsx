"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Loader2, AlertTriangle, CheckCircle, Sparkles } from "lucide-react"
import { trackFeatureUsage } from "@/app/actions/track-feature-usage"
import { UpgradePrompt } from "@/components/subscription/upgrade-prompt"

interface ResumeOptimizationPanelProps {
  resumeText: string
  jobDescription: string
  keywords: string[]
  onOptimize: (text: string, score: number) => void
}

export function ResumeOptimizationPanel({
  resumeText,
  jobDescription,
  keywords,
  onOptimize,
}: ResumeOptimizationPanelProps) {
  const [isOptimizing, setIsOptimizing] = useState(false)
  const [progress, setProgress] = useState(0)
  const [error, setError] = useState<string | null>(null)
  const [usageError, setUsageError] = useState<{
    error: string
    used: number
    limit: number
  } | null>(null)

  useEffect(() => {
    if (isOptimizing) {
      const interval = setInterval(() => {
        setProgress((prev) => {
          if (prev >= 95) {
            clearInterval(interval)
            return prev
          }
          return prev + 5
        })
      }, 500)

      return () => clearInterval(interval)
    }
  }, [isOptimizing])

  const handleOptimize = async () => {
    if (!resumeText || !jobDescription) {
      setError("Please provide both a resume and job description")
      return
    }

    try {
      setIsOptimizing(true)
      setProgress(0)
      setError(null)
      setUsageError(null)

      // Check feature usage
      const usageResult = await trackFeatureUsage("resume_optimizations")

      if (!usageResult.success) {
        if (usageResult.requiresUpgrade) {
          setUsageError({
            error: usageResult.error,
            used: usageResult.used,
            limit: usageResult.limit,
          })
          setIsOptimizing(false)
          return
        }

        throw new Error(usageResult.error)
      }

      // Simulate API call to optimize resume
      // In a real implementation, you would call your AI service here
      await new Promise((resolve) => setTimeout(resolve, 3000))

      // Calculate a score based on keyword matches
      const score = calculateScore(resumeText, jobDescription, keywords)

      // Generate optimized text (this is a placeholder)
      const optimizedText = `${resumeText}\n\n[This is a placeholder for the optimized resume. In a real implementation, this would be generated by your AI service.]`

      setProgress(100)
      onOptimize(optimizedText, score)
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred during optimization")
    } finally {
      setIsOptimizing(false)
    }
  }

  // Simple placeholder scoring function
  const calculateScore = (resume: string, jobDesc: string, kwords: string[]): number => {
    let score = 60 // Base score

    // Add points for keywords found in resume
    kwords.forEach((keyword) => {
      if (resume.toLowerCase().includes(keyword.toLowerCase())) {
        score += 3
      }
    })

    // Cap at 100
    return Math.min(score, 100)
  }

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold">Resume Optimization</h2>

      {error && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {usageError ? (
        <div className="space-y-4">
          <Alert variant="warning">
            <AlertTriangle className="h-4 w-4" />
            <AlertTitle>Usage Limit Reached</AlertTitle>
            <AlertDescription>{usageError.error}</AlertDescription>
          </Alert>

          <UpgradePrompt feature="resume_optimizations" used={usageError.used} limit={usageError.limit}>
            <Button className="w-full">
              <Sparkles className="mr-2 h-4 w-4" />
              Upgrade to Continue
            </Button>
          </UpgradePrompt>
        </div>
      ) : (
        <>
          {isOptimizing ? (
            <div className="space-y-4">
              <div className="flex justify-between text-sm">
                <span>Optimizing your resume...</span>
                <span>{progress}%</span>
              </div>
              <Progress value={progress} className="h-2" />
              <p className="text-sm text-muted-foreground">
                {progress < 30
                  ? "Analyzing your resume..."
                  : progress < 60
                    ? "Comparing with job description..."
                    : progress < 90
                      ? "Generating optimized content..."
                      : "Finalizing results..."}
              </p>
            </div>
          ) : progress === 100 ? (
            <Alert className="bg-green-50 dark:bg-green-950 border-green-200 dark:border-green-800">
              <CheckCircle className="h-4 w-4 text-green-600 dark:text-green-400" />
              <AlertTitle>Optimization Complete</AlertTitle>
              <AlertDescription>Your resume has been optimized successfully.</AlertDescription>
            </Alert>
          ) : (
            <Button
              onClick={handleOptimize}
              disabled={isOptimizing || !resumeText || !jobDescription}
              className="w-full"
            >
              {isOptimizing ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Optimizing...
                </>
              ) : (
                "Optimize Resume"
              )}
            </Button>
          )}
        </>
      )}
    </div>
  )
}
